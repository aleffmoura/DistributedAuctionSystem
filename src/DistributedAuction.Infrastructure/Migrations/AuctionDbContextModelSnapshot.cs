// <auto-generated />
using System;
using DistributedAuction.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DistributedAuction.Infrastructure.Migrations
{
    [DbContext(typeof(AuctionDbContext))]
    partial class AuctionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HighestAmount")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("HighestBidId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("TEXT");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("Region", "HighestAmount");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.AuctionSequence", b =>
                {
                    b.Property<Guid>("AuctionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("LastSequence")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuctionId");

                    b.ToTable("AuctionSequences");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.AuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Region");

                    b.HasIndex("EntityType", "EntityId", "OccurredAt");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Bid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeduplicationKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginRegion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Sequence")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasPending")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId", "Amount");

                    b.HasIndex("AuctionId", "DeduplicationKey")
                        .IsUnique();

                    b.HasIndex("AuctionId", "Sequence")
                        .IsUnique();

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.OutboxEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationRegion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OutboxEvents");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.PartitionRecovery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastProcessedEventAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId", "Region")
                        .IsUnique();

                    b.ToTable("PartitionRecoveries");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasDiscriminator<string>("VehicleType").HasValue("Vehicle");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Hatchback", b =>
                {
                    b.HasBaseType("DistributedAuction.Domain.Entities.Vehicle");

                    b.HasDiscriminator().HasValue("Hatchback");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Sedan", b =>
                {
                    b.HasBaseType("DistributedAuction.Domain.Entities.Vehicle");

                    b.HasDiscriminator().HasValue("Sedan");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Suv", b =>
                {
                    b.HasBaseType("DistributedAuction.Domain.Entities.Vehicle");

                    b.HasDiscriminator().HasValue("SUV");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Truck", b =>
                {
                    b.HasBaseType("DistributedAuction.Domain.Entities.Vehicle");

                    b.HasDiscriminator().HasValue("Truck");
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Bid", b =>
                {
                    b.HasOne("DistributedAuction.Domain.Entities.Auction", null)
                        .WithMany("Bids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DistributedAuction.Domain.Entities.Auction", b =>
                {
                    b.Navigation("Bids");
                });
#pragma warning restore 612, 618
        }
    }
}
